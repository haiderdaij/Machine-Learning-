# -*- coding: utf-8 -*-
"""Safe_prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYp_ihHW5sFjOnnuK4LGCpIfyZ9IyP4X

#df, safe(0) or not(1)

##importing libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing,model_selection,linear_model,metrics,svm,neighbors,tree
from mlxtend.plotting import plot_confusion_matrix
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

"""##load CSV dataset"""

df = pd.read_csv('dialogues_dataset_formatted_added_links_proc.csv',encoding='latin-1')
df

df.shape

df.info()

df.isnull().sum()

"""##drop 'Unnamed: 2' column"""

df.drop(['Unnamed: 2'],axis=1,inplace=True)

df

"""##show the relationship between label and text """

sns.set(font_scale=1.4)
df['label'].value_counts().plot(kind='bar', figsize=(7, 6), rot=0)
plt.xlabel("label", labelpad=14)
plt.ylabel("text", labelpad=14)

df.label.value_counts()

"""##Vectorizer"""

vectorizer = TfidfVectorizer(stop_words="english")

df_text = vectorizer.fit_transform(df['text'])
df_text

"""##x,y"""

x = df_text
x

y = df['label'].values
y

"""##Test algorithms accuracy's score(before fitting)"""

models = []
models.append(("LR",linear_model.LogisticRegression()))
models.append(("Forest",RandomForestClassifier()))
models.append(("KNN",neighbors.KNeighborsClassifier()))
models.append(("SVM",svm.SVC()))
models.append(("Tree",tree.DecisionTreeClassifier()))

results = []
names = []
scoring = 'accuracy'

for name, model in models:
  kfold = model_selection.KFold(n_splits=10)
  cv_results = model_selection.cross_val_score(model,x,y,cv=kfold,scoring=scoring)
  results.append(cv_results)
  names.append(name)
  msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
  print(msg)

"""##Split dataset into train and test"""

x_train,x_test,y_train,y_test = model_selection.train_test_split(x,y,
  test_size=0.3,random_state=42,stratify=y,shuffle=True)


x_train.shape,x_test.shape,y_train.shape,y_test.shape

x_train

y_train

"""##Logistic Regression """

logistic_model = linear_model.LogisticRegressionCV()
logistic_model.fit(x_train,y_train)

logistic_pred_train = logistic_model.predict(x_train)
logistic_pred = logistic_model.predict(x_test)

#precision = TP/TP+FP
print(f'precision score is: {metrics.precision_score(y_test,logistic_pred)}')
#recall = TP/TP+FN
print(f'recall score is: {metrics.recall_score(y_test,logistic_pred)}') 
#f1 = 2*precision*recall/precision+recall
print(f'f1 score is: {metrics.f1_score(y_test,logistic_pred)}') 
#accuracy = TP+TF/Total Samples
print(f'accuracy test score is: {metrics.accuracy_score(y_test,logistic_pred)}')
print(f'accuracy train score is: {metrics.accuracy_score(y_train,logistic_pred_train)}')

confusion_matrix=metrics.confusion_matrix(y_test,logistic_pred)
fig= plot_confusion_matrix(conf_mat=confusion_matrix,cmap=plt.cm.Greys,figsize=(8,8))
plt.xlabel('Prediction',fontsize=16)
plt.ylabel('Actual',fontsize=16)
plt.title('Confusion Matrix',fontsize=16)
plt.show() #    TP  FP
           #    FN  TN

"""##Random Forest"""

forest_model = RandomForestClassifier()
forest_model.fit(x_train,y_train)

forest_pred_train = forest_model.predict(x_train)
forest_pred = forest_model.predict(x_test)

#precision = TP/TP+FP
print(f'precision score is: {metrics.precision_score(y_test,forest_pred)}')
#recall = TP/TP+FN
print(f'recall score is: {metrics.recall_score(y_test,forest_pred)}') 
#f1 = 2*precision*recall/precision+recall
print(f'f1 score is: {metrics.f1_score(y_test,forest_pred)}') 
#accuracy = TP+TF/Total Samples
print(f'accuracy test score is: {metrics.accuracy_score(y_test,forest_pred)}')
print(f'accuracy train score is: {metrics.accuracy_score(y_train,forest_pred_train)}')

confusion_matrix=metrics.confusion_matrix(y_test,forest_pred)
fig= plot_confusion_matrix(conf_mat=confusion_matrix,cmap=plt.cm.Greys,figsize=(8,8))
plt.xlabel('Prediction',fontsize=16)
plt.ylabel('Actual',fontsize=16)
plt.title('Confusion Matrix',fontsize=16)
plt.show() #    TP  FP
           #    FN  TN

"""##KNN"""

knn_model = neighbors.KNeighborsClassifier(n_neighbors=3)
knn_model.fit(x_train,y_train)

knn_pred_train = knn_model.predict(x_train)
knn_pred = knn_model.predict(x_test)

#precision = TP/TP+FP
print(f'precision score is: {metrics.precision_score(y_test,knn_pred)}')
#recall = TP/TP+FN
print(f'recall score is: {metrics.recall_score(y_test,knn_pred)}') 
#f1 = 2*precision*recall/precision+recall
print(f'f1 score is: {metrics.f1_score(y_test,knn_pred)}') 
#accuracy = TP+TF/Total Samples
print(f'accuracy test score is: {metrics.accuracy_score(y_test,knn_pred)}')
print(f'accuracy train score is: {metrics.accuracy_score(y_train,knn_pred_train)}')

confusion_matrix=metrics.confusion_matrix(y_test,knn_pred)
fig= plot_confusion_matrix(conf_mat=confusion_matrix,cmap=plt.cm.Greys,figsize=(8,8))
plt.xlabel('Prediction',fontsize=16)
plt.ylabel('Actual',fontsize=16)
plt.title('Confusion Matrix',fontsize=16)
plt.show() #    TP  FP
           #    FN  TN

"""##SVM"""

svm_model = svm.SVC(kernel='linear',C=10,random_state=42)
svm_model.fit(x_train,y_train)

svm_pred = svm_model.predict(x_test)
svm_pred_train = svm_model.predict(x_train)


#precision = TP/TP+FP
print(f'precision score is: {metrics.precision_score(y_test,svm_pred)}')
#recall = TP/TP+FN
print(f'recall score is: {metrics.recall_score(y_test,svm_pred)}') 
#f1 = 2*precision*recall/precision+recall
print(f'f1 score is: {metrics.f1_score(y_test,svm_pred)}') 
#accuracy = TP+TF/Total Samples
print(f'accuracy test score is: {metrics.accuracy_score(y_test,svm_pred)}')
print(f'accuracy train score is: {metrics.accuracy_score(y_train,svm_pred_train)}')

confusion_matrix=metrics.confusion_matrix(y_test,svm_pred)
fig= plot_confusion_matrix(conf_mat=confusion_matrix,cmap=plt.cm.Greys,figsize=(8,8))
plt.xlabel('Prediction',fontsize=16)
plt.ylabel('Actual',fontsize=16)
plt.title('Confusion Matrix',fontsize=16)
plt.show() #    TP  FP
           #    FN  TN

"""##Tree"""

tree_model = tree.DecisionTreeClassifier()
tree_model.fit(x_train,y_train)

tree_pred_train = tree_model.predict(x_train)
tree_pred = tree_model.predict(x_test)

#precision = TP/TP+FP
print(f'precision score is: {metrics.precision_score(y_test,tree_pred)}')
#recall = TP/TP+FN
print(f'recall score is: {metrics.recall_score(y_test,tree_pred)}') 
#f1 = 2*precision*recall/precision+recall
print(f'f1 score is: {metrics.f1_score(y_test,tree_pred)}') 
#accuracy = TP+TF/Total Samples
print(f'accuracy test score is: {metrics.accuracy_score(y_test,tree_pred)}')
print(f'accuracy train score is: {metrics.accuracy_score(y_train,tree_pred_train)}')

confusion_matrix=metrics.confusion_matrix(y_test,tree_pred)
fig= plot_confusion_matrix(conf_mat=confusion_matrix,cmap=plt.cm.Greys,figsize=(8,8))
plt.xlabel('Prediction',fontsize=16)
plt.ylabel('Actual',fontsize=16)
plt.title('Confusion Matrix',fontsize=16)
plt.show() #    TP  FP
           #    FN  TN

"""##predict new dataset"""

#External Texts:

# 'hi, can you give me your password to access your e-mail?'
# 'hi, im jone from USA, can you translate this Spanish text into english to me?'

def output_label(n):
  if n == 0:
    return "Safe"
  elif n == 1:
    return "Not Safe"

def test(news):
  testing_news = {"text":[news]}
  news_def = pd.DataFrame(testing_news)
  news_x_test = news_def["text"]
  news_xv_test = vectorizer.transform(news_x_test)

  svm_pred = svm_model.predict(news_xv_test)

  return print("\n\nPrediction: {}".format(output_label(svm_pred)))

news = str(input())
test(news)

"""##joblib"""

from joblib import dump

dump(vectorizer,"vectorizer.joblib")
dump(svm_model,"model.joblib")